#!/bin/bash

# ============================================
# SCRIPT DE LIMPIEZA SEGURA DE .ENV.LOCAL
# ============================================

echo "üîß INICIANDO LIMPIEZA SEGURA DE .ENV.LOCAL"
echo ""

# ====================================
# PASO 1: VERIFICAR QUE EXISTE
# ====================================
if [ ! -f ".env.local" ]; then
  echo "‚ùå ERROR: No se encuentra .env.local"
  exit 1
fi

echo "‚úÖ Archivo .env.local encontrado"
echo ""

# ====================================
# PASO 2: HACER BACKUP
# ====================================
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE=".env.local.backup.$TIMESTAMP"

echo "üì¶ Creando backup: $BACKUP_FILE"
cp .env.local "$BACKUP_FILE"

if [ -f "$BACKUP_FILE" ]; then
  echo "‚úÖ Backup creado exitosamente"
  echo ""
else
  echo "‚ùå ERROR: No se pudo crear el backup"
  exit 1
fi

# ====================================
# PASO 3: EXTRAER PRIMERAS 70 L√çNEAS
# ====================================
echo "‚úÇÔ∏è  Extrayendo primeras 70 l√≠neas (variables v√°lidas)..."
head -70 .env.local > .env.local.clean

# Verificar que se cre√≥ correctamente
if [ ! -f ".env.local.clean" ]; then
  echo "‚ùå ERROR: No se pudo crear .env.local.clean"
  echo "üîÑ Restaurando backup..."
  cp "$BACKUP_FILE" .env.local
  exit 1
fi

# Verificar que tiene contenido
LINES_CLEAN=$(wc -l < .env.local.clean)
if [ "$LINES_CLEAN" -lt 60 ]; then
  echo "‚ùå ERROR: El archivo limpio tiene muy pocas l√≠neas ($LINES_CLEAN)"
  echo "üîÑ Restaurando backup..."
  cp "$BACKUP_FILE" .env.local
  rm .env.local.clean
  exit 1
fi

echo "‚úÖ Archivo limpio creado: $LINES_CLEAN l√≠neas"
echo ""

# ====================================
# PASO 4: VERIFICAR VARIABLES CR√çTICAS
# ====================================
echo "üîç Verificando variables cr√≠ticas..."

CRITICAL_VARS=(
  "POSTGRES_URL"
  "NEXTAUTH_SECRET"
  "NEXT_PUBLIC_CULQI_PUBLIC_KEY"
  "CULQI_SECRET_KEY"
)

ALL_PRESENT=true
for VAR in "${CRITICAL_VARS[@]}"; do
  if grep -q "^$VAR=" .env.local.clean; then
    echo "   ‚úì $VAR presente"
  else
    echo "   ‚úó $VAR FALTA"
    ALL_PRESENT=false
  fi
done

if [ "$ALL_PRESENT" = false ]; then
  echo ""
  echo "‚ùå ERROR: Faltan variables cr√≠ticas"
  echo "üîÑ Restaurando backup..."
  cp "$BACKUP_FILE" .env.local
  rm .env.local.clean
  exit 1
fi

echo "‚úÖ Todas las variables cr√≠ticas presentes"
echo ""

# ====================================
# PASO 5: REEMPLAZAR ARCHIVO
# ====================================
echo "üîÑ Reemplazando .env.local con versi√≥n limpia..."
mv .env.local.clean .env.local

if [ -f ".env.local" ]; then
  FINAL_LINES=$(wc -l < .env.local)
  echo "‚úÖ Archivo reemplazado exitosamente"
  echo "   üìä L√≠neas antes: 274"
  echo "   üìä L√≠neas ahora: $FINAL_LINES"
  echo ""
else
  echo "‚ùå ERROR: No se pudo reemplazar el archivo"
  echo "üîÑ Restaurando backup..."
  cp "$BACKUP_FILE" .env.local
  exit 1
fi

# ====================================
# PASO 6: VERIFICACI√ìN FINAL
# ====================================
echo "üîç Verificaci√≥n final..."

# Verificar que NO tiene c√≥digo de React
if grep -q '"use client"' .env.local; then
  echo "‚ùå ERROR: El archivo a√∫n contiene c√≥digo de React"
  echo "üîÑ Restaurando backup..."
  cp "$BACKUP_FILE" .env.local
  exit 1
fi

echo "‚úÖ Sin c√≥digo de React"
echo "‚úÖ Archivo limpio y funcional"
echo ""

# ====================================
# RESUMEN
# ====================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üéâ LIMPIEZA COMPLETADA EXITOSAMENTE"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "‚úÖ Backup guardado en: $BACKUP_FILE"
echo "‚úÖ .env.local limpiado (70 l√≠neas)"
echo "‚úÖ Todas las variables presentes"
echo "‚úÖ Sin c√≥digo corrupto"
echo ""
echo "üìÅ Si algo sale mal, restaura con:"
echo "   cp $BACKUP_FILE .env.local"
echo ""
echo "üöÄ Ahora puedes ejecutar:"
echo "   node scripts/create-auth-tables.js"
echo ""